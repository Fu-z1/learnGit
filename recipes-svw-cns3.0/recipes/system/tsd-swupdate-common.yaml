inherit: [buildenv, packing-module, werror]

metaEnvironment:
   PKG_RESPONSIBLE: "System-Basisfunktion"

depends:
  - libs::ext-openssl-dev
  - system::tsd-common-dev
  - system::tsd-tee-cryptolib-swupdate-dev
  - if: "$(eq,${TSD_BUILDENV_ENABLE_TEST_TARGETS:-0},0)"
    depends:
      - system::tsd-swupdate-ta-dev
  - if: "$(eq,${TSD_BUILDENV_ENABLE_TEST_TARGETS:-0},1)"
    depends:
      - system::tsd-swupdate-ta-stub
  - use: []
    depends:
      - libs::ext-openssl-target
      - system::tsd-common-target
      - system::tsd-tee-cryptolib-swupdate-target
      - if: "$(eq,${TSD_BUILDENV_ENABLE_TEST_TARGETS:-0},0)"
        depends:
          - system::tsd-swupdate-ta-target

checkoutSCM:
   scm: git
   url: git@${DEFAULT_PCC_GIT_SERVER}:mib3-system/tsd.swupdate.common.git
   dir: tsd.swupdate.common
   #tag: mqb_sop1_eu-3.7.0
   #branch: master_mqb_sop1_eu
   #branch: main/svw_cns3.0_1480_dev
   branch: feature/cns_oru

multiPackage:
   developer:
      privateEnvironment:
         SW_UPDATE_KEY: "Developer"
      buildVars: [SW_UPDATE_KEY]
      multiPackage:
         dev:
            buildScript: |
               buildenvBuildAll -DSW_UPDATE_KEY=${SW_UPDATE_KEY}
            packageScript: |
               buildenvPackageDev install
            provideDeps: ["*-dev"]

         target:
            buildScript: |
               buildenvBuildAll -DSW_UPDATE_KEY=${SW_UPDATE_KEY}
            packageScript: |
               buildenvPackageTarget
               d=$(mktemp -d)
               rsync -a --delete --exclude ".debug" ./ $d
               buildSwupModule -n "swupdate-common" \
                  -p "emmc.system" \
                  -o "system:tsd-swupdate-common " -f $d -- \
                  -U "Partition=rootfs_ro"
               rm -rf $d
            provideDeps: ["*-target"]

   customer:
      privateEnvironment:
         SW_UPDATE_KEY: "Customer"
      buildVars: [SW_UPDATE_KEY]
      multiPackage:
         dev:
            buildScript: |
               buildenvBuildAll -DSW_UPDATE_KEY=${SW_UPDATE_KEY}
            packageScript: |
               buildenvPackageDev install
            provideDeps: ['*-dev']

         target:
            buildScript: |
               buildenvBuildAll -DSW_UPDATE_KEY=${SW_UPDATE_KEY}
            packageScript: |
               buildenvPackageTarget
               d=$(mktemp -d)
               rsync -a --delete --exclude ".debug" ./ $d
               buildSwupModule -n "swupdate-common" \
                  -p "emmc.system" \
                  -o "system:tsd-swupdate-common " -f $d -- \
                  -U "Partition=rootfs_ro"
               rm -rf $d
            provideDeps: ['*-target']

   unittests:
      buildScript: buildenvTestAll
      packageScript: buildenvPackageTests


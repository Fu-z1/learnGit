From 8617df22ae64ae7566043b92d5e1121193919713 Mon Sep 17 00:00:00 2001
From: Matthias Behr <mbehr@mcbehr.de>
Date: Tue, 3 Oct 2017 09:26:59 +0200
Subject: [PATCH] added fallthrough for gcc7

---
 json_object.c  |  1 +
 json_tokener.c |  1 +
 linkhash.c     | 22 +++++++++++-----------
 3 files changed, 13 insertions(+), 11 deletions(-)

diff --git a/json_object.c b/json_object.c
index 6cc73bc..8f6df1a 100644
--- a/json_object.c
+++ b/json_object.c
@@ -552,6 +552,7 @@ int64_t json_object_get_int64(struct json_object *jso)
     return jso->o.c_boolean;
   case json_type_string:
 	if (json_parse_int64(jso->o.c_string.str, &cint) == 0) return cint;
+	// fallthrough
   default:
     return 0;
   }
diff --git a/json_tokener.c b/json_tokener.c
index 9a76293..7ff53a1 100644
--- a/json_tokener.c
+++ b/json_tokener.c
@@ -305,6 +305,7 @@ struct json_object* json_tokener_parse_ex(struct json_tokener *tok,
             tok->err = json_tokener_error_parse_unexpected;
             goto out;
         }
+	// fallthrough
       case '"':
 	state = json_tokener_state_string;
 	printbuf_reset(tok->pb);
diff --git a/linkhash.c b/linkhash.c
index 712c387..8791a42 100644
--- a/linkhash.c
+++ b/linkhash.c
@@ -376,17 +376,17 @@ static uint32_t hashlittle( const void *key, size_t length, uint32_t initval)
     /*-------------------------------- last block: affect all 32 bits of (c) */
     switch(length)                   /* all the case statements fall through */
     {
-    case 12: c+=((uint32_t)k[11])<<24;
-    case 11: c+=((uint32_t)k[10])<<16;
-    case 10: c+=((uint32_t)k[9])<<8;
-    case 9 : c+=k[8];
-    case 8 : b+=((uint32_t)k[7])<<24;
-    case 7 : b+=((uint32_t)k[6])<<16;
-    case 6 : b+=((uint32_t)k[5])<<8;
-    case 5 : b+=k[4];
-    case 4 : a+=((uint32_t)k[3])<<24;
-    case 3 : a+=((uint32_t)k[2])<<16;
-    case 2 : a+=((uint32_t)k[1])<<8;
+    case 12: c+=((uint32_t)k[11])<<24; // fallthrough
+    case 11: c+=((uint32_t)k[10])<<16; // fallthrough
+    case 10: c+=((uint32_t)k[9])<<8; // fallthrough
+    case 9 : c+=k[8]; // fallthrough
+    case 8 : b+=((uint32_t)k[7])<<24; // fallthrough
+    case 7 : b+=((uint32_t)k[6])<<16; // fallthrough
+    case 6 : b+=((uint32_t)k[5])<<8; // fallthrough
+    case 5 : b+=k[4]; // fallthrough
+    case 4 : a+=((uint32_t)k[3])<<24; // fallthrough
+    case 3 : a+=((uint32_t)k[2])<<16; // fallthrough
+    case 2 : a+=((uint32_t)k[1])<<8; // fallthrough
     case 1 : a+=k[0];
              break;
     case 0 : return c;
-- 
2.17.0


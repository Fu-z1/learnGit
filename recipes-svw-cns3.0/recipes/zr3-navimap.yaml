inherit: [packing-device, packing-release]

depends:
   - keys::devkeys::devkeys-updatecontainer
   - system::jpcc-update-scripts-MXNavi-pkg
   - MXNavi::integration

privateEnvironment:
   SANDBOX: "$(is-sandbox-enabled)"

buildVars:
   - MU_VERSION
   - TRAIN_NUMBER
   - UPDATE_VARIANTS
   - VARIANTS #important to save in the audit-trail
   - SIGNATURE
   - SANDBOX
   - DEVELOPMENT_FLAGS
   - PLATFORM
   - TRAIN_PREFIX
   - TRAIN_PKG_VERSION
   - TRAIN_SUFFIX
   - CONFIG_FDS

buildVarsWeak:
   - PACKAGE_VERSION
   - MODULE_VERSION
   - BUILDREF

environment:
   DEVELOPMENT_FLAGS: "true"
   TRAIN_PREFIX: "MOI3_JPCC_MAPDB"
   TRAIN_PKG_VERSION: "1"
   PACKAGE_VERSION: "${MAP_MAJOR}.${MAP_DELIVERY}.${MAP_BUILDREF}"
   MODULE_VERSION: "${MAP_MAJOR}.${MAP_DELIVERY}.${MAP_BUILDREF}"

buildScript: |

   rm -rf *
   declare -A tocopy
   for key in ${!BOB_DEP_PATHS[@]}; do
      tocopy[$key]=${BOB_DEP_PATHS[$key]}
   done
   unset tocopy[packing::packing-scripts]
   unset tocopy[keys::devkeys::devkeys-updatecontainer]
   unset tocopy[system::jpcc-update-scripts-MXNavi-pkg]

   #create prescripts device
   buildSwupDevice --packageVersion ${PACKAGE_VERSION} \
      --packageType="device" --packageName="prescripts" \
      --outputDir UpdateContainer \
      --diagnosticAddress=0 \
      --deviceType=MU \
      --module ${BOB_DEP_PATHS['system::jpcc-update-scripts-MXNavi-pkg']}/_swupdata


   copy_and_check_modules() {
      modules=""
      for key in $@; do
         if [ ${tocopy[$key]+isset} ]; then
            modules="$modules --module ${tocopy[$key]}/_swupdata"
            unset tocopy[$key]
         else
            echo "ERROR: while building device: $key not found in tocopy!"
         fi
      done
   }

   # create emmc-device using all remaining modules
   emmc_modules() {
      for key in "${!tocopy[@]}"; do
         echo "--submodule ${key%::*}=${tocopy[$key]}/_swupdata"
      done | sort
   }

   modules=$(emmc_modules)
   buildSwupDevice --packageVersion ${PACKAGE_VERSION} \
      --packageType="device" --packageName="emmc" \
      --outputDir UpdateContainer \
      --diagnosticAddress=0 \
      --deviceType=MU \
      ${modules//::/.}

   # set development flags for development software
   _DEVFLAGS=""
   if [ $DEVELOPMENT_FLAGS == true ]; then
      _DEVFLAGS+=" --devFlag SkipCheckManifestChecksum=false"
      _DEVFLAGS+=" --devFlag SkipCheckInstallerChecksum=true"
      _DEVFLAGS+=" --devFlag SkipCheckVariant=false"
   fi

   buildSwupRelease --packageVersion ${PACKAGE_VERSION} \
    --packageType="main" --packageName=${TRAIN_SUFFIX} \
    --updateContainerDir UpdateContainer --release ${TRAIN_SUFFIX} \
    --muVersion ${MU_VERSION} --variant ${UPDATE_VARIANTS} \
    --buildRef ${BUILDREF} \
    --device prescripts \
    --device emmc \
    --flag CheckAllUpdates=true \
    --devKey ${BOB_DEP_PATHS['keys::devkeys::devkeys-updatecontainer']}/dev/MetainfoDevKey-MIB3/config_FDSProject_${CONFIG_FDS:0}_E/keys/FDSProject_${CONFIG_FDS:0}_E.p8 \
    --sandboxEnabled ${SANDBOX} \
    ${_DEVFLAGS}

packageScript: |
   rsync -a --delete $1/ .

multiPackage:
   # Variant package fragment generated by genNavimaps.py. Do not waste your
   # time with editing. Re-generate variant data from and with pure::variants
   # JSON export and genNavimaps.py.
   #
   # The lines below are intended to be used as multiPackage elements in
   # zr3-navimap.yaml.
   CHN:
      environment:
         MU_VERSION: "C${MAP_MAJOR}"
         TRAIN_SUFFIX: "E_${MAP_MAJOR}_${MAP_DELIVERY}_${MAP_BUILDREF}_P"
         VARIANTS: "301001,301002,301005,701001,701002,701004"
         SIGNATURE: "false"
         MAP_VARIANT: "CHN"
         DEVELOPMENT_FLAGS: "true"
      privateEnvironment:
         UPDATE_VARIANTS: "FM3-S-NWBY4-CN-SK-MQ2-PC,FM3-S-NWBY4-CN-SK-MQB-PC,FM3-S-NWBY4-CN-VW-MQ2-PC,FM3-S-NWBY4-CN-VW-MQB-PC,FM3-S-NWBY4-HM-VW-MQ2-PC,FM3-S-NWBY4-HM-VW-MQB-PC"
   CHN_2mesh:
      environment:
         MU_VERSION: "C${MAP_MAJOR}"
         TRAIN_SUFFIX: "E_${MAP_MAJOR}_${MAP_DELIVERY}_${MAP_BUILDREF}_P"
         VARIANTS: "301001,301002,301005,701001,701002,701004"
         SIGNATURE: "false"
         MAP_VARIANT: "CHN_2mesh"
         DEVELOPMENT_FLAGS: "true"
      privateEnvironment:
         UPDATE_VARIANTS: "FM3-S-NWBY4-CN-SK-MQ2-PC,FM3-S-NWBY4-CN-SK-MQB-PC,FM3-S-NWBY4-CN-VW-MQ2-PC,FM3-S-NWBY4-CN-VW-MQB-PC,FM3-S-NWBY4-HM-VW-MQ2-PC,FM3-S-NWBY4-HM-VW-MQB-PC"
   CHN_sec:
      environment:
         MU_VERSION: "0${MAP_MAJOR}"
         TRAIN_SUFFIX: "P_${MAP_MAJOR}_${MAP_DELIVERY}_${MAP_BUILDREF}_P"
         VARIANTS: "311001,311002,311005,711001,711002,711004"
         SIGNATURE: "false"
         MAP_VARIANT: "CHN"
         SECURE_DEVELOPMENT_FLAGS: "true"
      privateEnvironment:
         UPDATE_VARIANTS: "FM3-S-NWBY4-CN-SK-MQ2-PC,FM3-S-NWBY4-CN-SK-MQB-PC,FM3-S-NWBY4-CN-VW-MQ2-PC,FM3-S-NWBY4-CN-VW-MQB-PC,FM3-S-NWBY4-HM-VW-MQ2-PC,FM3-S-NWBY4-HM-VW-MQB-PC"
   TW:
      environment:
         MU_VERSION: "T${MAP_MAJOR}"
         TRAIN_SUFFIX: "E_${MAP_MAJOR}_${MAP_DELIVERY}_${MAP_BUILDREF}_P"
         VARIANTS: "301003,301004,701003,701005"
         SIGNATURE: "false"
         MAP_VARIANT: "TW"
         DEVELOPMENT_FLAGS: "true"
      privateEnvironment:
         UPDATE_VARIANTS: "FM3-S-NWBY4-TW-SK-MQ2-PC,FM3-S-NWBY4-TW-SK-MQB-PC,FM3-S-NWBY4-TW-VW-MQ2-PC,FM3-S-NWBY4-TW-VW-MQB-PC"
   TW_sec:
      environment:
         MU_VERSION: "0${MAP_MAJOR}"
         TRAIN_SUFFIX: "P_${MAP_MAJOR}_${MAP_DELIVERY}_${MAP_BUILDREF}_P"
         VARIANTS: "311003,311004,711003,711005"
         SIGNATURE: "false"
         MAP_VARIANT: "TW"
         SECURE_DEVELOPMENT_FLAGS: "true"
      privateEnvironment:
         UPDATE_VARIANTS: "FM3-S-NWBY4-TW-SK-MQ2-PC,FM3-S-NWBY4-TW-SK-MQB-PC,FM3-S-NWBY4-TW-VW-MQ2-PC,FM3-S-NWBY4-TW-VW-MQB-PC"

provideVars:
   TRAIN_PKG_VERSION: ${TRAIN_PKG_VERSION}
   TRAIN_PREFIX: ${TRAIN_PREFIX}

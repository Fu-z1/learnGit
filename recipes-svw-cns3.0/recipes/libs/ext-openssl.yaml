inherit: [buildenv, install, make, patch, packing-module]

environment:
   PKG_VERSION: "1_1_0e"

depends:
  - if: "${OPENSSL_LINK_SHARED:-1}"
    depends:
      - libs::ext-zlib-dev
      - use: []
        depends:
          - libs::ext-zlib-target
  - if: "$(eq,${OPENSSL_LINK_SHARED:-1},0)"
    depends:
      - libs::ext-zlib-static-dev
      - use: []
        depends:
          - libs::ext-zlib-static-target

checkoutVars: [PKG_VERSION]
checkoutSCM:
  - scm: git
    url: git@${DEFAULT_PCC_GIT_SERVER}:tip-libs/ext.openssl.git
    dir: openssl_${PKG_VERSION}
    tag: OpenSSL_${PKG_VERSION}
  - scm: git
    url: git@${DEFAULT_PCC_GIT_SERVER}:mib3-security/tsd-openssl-vkms-engine.git
    dir: tsd.openssl.vkms.engine
    #tag: 1.4.0
    branch: main/svw_cns3.0_1520_dev

checkoutDeterministic: true
checkoutScript: |
   cp tsd.openssl.vkms.engine/api/tsd/openssl/vkms/engine.h openssl_${PKG_VERSION}/crypto/include/internal/vkms_engine.h

   pushd openssl_${PKG_VERSION}
      patchApplySeries ../tsd.openssl.vkms.engine/patches/openssl_${PKG_VERSION}.patch
   popd

multiPackage:
   ? ""
   :  buildVars: [PKG_VERSION, LIBDIR, CC, AR, RANLIB, AUTOCONF_HOST, OPENSSL_LINK_SHARED]
      buildTools: [toolchain]
      buildScript: |
         mkdir -p build install
         MAKE_JOBS=1
         pushd build
         rsync -a --delete $1/openssl_${PKG_VERSION}/ .
         case "${AUTOCONF_HOST}" in
            aarch64*-linux*)
               OPENSSL_SPECIAL_CFG="no-afalgeng"
               OPENSSL_TARGET="linux-aarch64"
               ;;
            i[34567]86*-linux*)
               OPENSSL_SPECIAL_CFG=""
               OPENSSL_TARGET="386 linux-elf -m32"
               ;;
            x86_64*-linux*)
               OPENSSL_SPECIAL_CFG=""
               OPENSSL_TARGET="linux-x86_64"
               ;;
            *)
               echo "Unknown architecture: ${AUTOCONF_HOST}" >&2
               exit 1
               ;;
         esac
         if [[ "${OPENSSL_LINK_SHARED:-1}" == "1" ]]; then
            ./Configure \
               --prefix=/usr \
               --libdir=${LIBDIR} \
               --debug \
               shared \
               zlib-dynamic \
               ${OPENSSL_SPECIAL_CFG} \
               --with-zlib-include=${BOB_DEP_PATHS[libs::ext-zlib-dev]}/usr/include \
               ${OPENSSL_TARGET}
         else
            ./Configure \
               --prefix=/usr \
               --libdir=${LIBDIR} \
               no-shared \
               no-zlib-dynamic \
               no-comp no-idea no-dtls no-hw no-engine no-threads no-err no-psk no-asm \
               no-srp no-ec2m no-weak-ssl-ciphers no-autoerrinit  no-deprecated no-dso \
               no-dgram no-filenames no-nextprotoneg no-psk no-rfc3779 no-sock no-srp no-srtp no-ts no-ui no-tls  \
               no-bf no-blake2 no-camellia no-cast no-chacha no-cmac \
               no-des no-dh no-dsa no-ecdh no-ecdsa no-idea no-md4 no-mdc2 no-ocb no-poly1305 \
               no-rc2 no-rc4 no-rmd160 no-scrypt no-seed no-whirlpool no-gost \
               ${OPENSSL_SPECIAL_CFG} \
               --with-zlib-include=${BOB_DEP_PATHS[libs::ext-zlib-static-dev]}/usr/include \
               ${OPENSSL_TARGET} \
               -static -static-libgcc -ffunction-sections -fdata-sections -Os \
               -Wl,--gc-sections
         fi
         #make depend
         makeParallel
         make DESTDIR=${PWD}/../install install_sw
         if [[ "${OPENSSL_LINK_SHARED:-1}" == "1" ]]; then
            rm -v ${PWD}/../install/usr/${LIBDIR}/libssl.a
            rm -v ${PWD}/../install/usr/${LIBDIR}/libcrypto.a
         fi
         popd

      multiPackage:
         dev:
            packageTools: [buildenv]
            packageScript: |
               installPackageDev $1/install/
               # extra header files to build wapi wpa_supplicant with openssl 1.1.0
               cp -a $1/build/crypto/ec/ec_lcl.h usr/include/openssl
               cp -a $1/build/e_os.h usr/include/openssl
               cp -a $1/build/crypto/include/internal/x509_int.h usr/include/openssl
               tsd-buildenv-create-shim.sh -p usr -L ${LIBDIR} -l ssl -l crypto -I include -d ext.zlib ext.openssl
            provideDeps: ['*-dev']

         target:
            packageScript: |
               rsync -r --links --delete --exclude '*.pc' --exclude libcrypto.so --exclude libssl.so --exclude pkgconfig $1/install/* .
               shopt -s extglob
               rm -rf usr/!(lib|lib64)
               chmod -R u+w .
               installStripAll usr
               d=$(mktemp -d)
               rsync -a --delete --exclude ".debug" ./ $d
               buildSwupModule -n "ext-openssl" \
                  -p "emmc.libs" \
                  -o "libs:ext-openssl " -f $d -- \
                  -U "Partition=rootfs_ro"
               rm -rf $d

            provideDeps: ['*-target']

         # A more verbose openssl binary with chrome and spoilers for
         # development.
         #
         # The original binary hame is already taken by the
         # binary-static-target package - so use an alternative one.
         binary-shared-target:
            environment:
               OPENSSL_LINK_SHARED: "1"
            provideDeps: ['*-target']
            packageScript: |
               mkdir -p usr/bin
               cp $1/install/usr/bin/openssl usr/bin/openssl-shared
               installStripAll usr

# The openssl binary for tight storage constraints like software
# update in Flash.
         binary-static-target:
            environment:
               OPENSSL_LINK_SHARED: "0"
            provideDeps: ['*static-target']
            packageScript: |
               mkdir -p usr/bin
               cp $1/install/usr/bin/openssl usr/bin
               installStripAll usr
         tool:
            environment:
               OPENSSL_LINK_SHARED: "0"
            packageScript: |
               rsync -r --links --delete --exclude '*.pc' --exclude pkgconfig $1/install/* .
            provideTools:
               openssl:
                  path: "usr/bin"

   vkms-engine:
      environment:
         ENGINES_DIR: "engines-1.1"
         PCC_INTERN: "$(and,$(ne,${TARGET_ENVIRONMENT:-},icas),$(ne,${TARGET_ENVIRONMENT:-},lg))"

      privateEnvironment:
         USERSPACE_BACKEND: "$(if-then-else,$(or,$(ne,${TARGET_TYPE},embedded),$(not,${PCC_INTERN})),1,0)"

      depends:
        - libs::ext-openssl-dev
        - name: system::ext-vkms-dev
          if: "$(and,$(eq,${TARGET_TYPE},embedded),${PCC_INTERN})"
        - use: []
          depends:
            - libs::ext-openssl-target
            - name: system::ext-vkms-target
              if: "$(and,$(eq,${TARGET_TYPE},embedded),${PCC_INTERN})"

      multiPackage:
         ? ""
         :  buildVars: [USERSPACE_BACKEND]
            buildScript: |
               buildenvBuildAll -DTSD_OPENSSL_VKMS_ENGINE_USERSPACE_BACKEND=${USERSPACE_BACKEND}

            multiPackage:
               dev:
                  packageVars: [LIBDIR, ENGINES_DIR]
                  packageScript: |
                     buildenvPackageDev install

                     mkdir -p usr/$LIBDIR/$ENGINES_DIR
                     pushd usr/$LIBDIR/$ENGINES_DIR
                        ln -sf ../tsd.openssl.vkms.engine.so openssl-vkms-engine.so
                     popd

                  provideDeps: ['*-dev']

               target:
                  packageVars: [LIBDIR, ENGINES_DIR]
                  packageScript: |
                     buildenvPackageTarget install

                     mkdir -p usr/$LIBDIR/$ENGINES_DIR
                     pushd usr/$LIBDIR/$ENGINES_DIR
                        ln -sf ../tsd.openssl.vkms.engine.so openssl-vkms-engine.so
                     popd
                     d=$(mktemp -d)
                     rsync -a --delete --exclude ".debug" ./ $d
                     buildSwupModule -n "ext-openssl-vkms-engine" \
                        -p "emmc.libs" \
                        -o "libs:ext-openssl-vkms-engine" -f $d -- \
                        -U "Partition=rootfs_ro"
                     rm -rf $d
                  inherit: [packing-module]

                  provideDeps: ['*-target']

         test:
            depends:
              - libs::ext-openssl-vkms-engine-dev

            buildVars: [LIBDIR, ENGINES_DIR, USERSPACE_BACKEND]
            buildScript: |
               buildenvBuildModules \
                  -DTSD_OPENSSL_VKMS_ENGINE_USERSPACE_BACKEND=${USERSPACE_BACKEND} \
                  -DTSD_BUILDENV_ENABLE_APP_TARGETS=1 \
                  -DTSD_BUILDENV_INSTALLABLE_APP_TARGETS=1 \
                  tsd.openssl.vkms.engine.app

               cat <<-EOF > dist/usr/bin/env.sh
               export PATH="${BOB_DEP_PATHS[libs::ext-openssl-dev]}/usr/bin:\$PATH"
               export LD_LIBRARY_PATH="${BOB_DEP_PATHS[libs::ext-openssl-dev]}/usr/${LIBDIR}"
               export OPENSSL_ENGINES="${BOB_DEP_PATHS[libs::ext-openssl-vkms-engine-dev]}/usr/${LIBDIR}/${ENGINES_DIR}"
               EOF

               find $1 -name "VIWI_SERVER.cer" -type f -exec cp {} dist/usr/bin/VIWI_SERVER \;
               find $1 -name "CLIENT.*" -type f -exec cp {} dist/usr/bin/ \;
               find $1 -name "VW_ROOT_CA.cer" -type f -exec cp {} dist/usr/bin/CHAIN.cer \;
               find $1 -name "VW_ECU_CA.cer" -type f -exec cat {} >> dist/usr/bin/CHAIN.cer \;
               find $1 -name "ECU_CA.cer" -type f -exec cat {} >> dist/usr/bin/CHAIN.cer \;

               SERVER_SH=dist/usr/bin/server.sh
               CLIENT_SH=dist/usr/bin/client.sh
               EXAMPLE_SH=dist/usr/bin/example.sh

               cat <<-EOF > $SERVER_SH
               #!/bin/sh

               source env.sh

               openssl s_server -engine openssl-vkms-engine -keyform engine -key VIWI_SERVER -cert VIWI_SERVER \\
                  -CAfile CHAIN.cer -tls1_2 -Verify 32 -cipher ECDHE-ECDSA-AES128-GCM-SHA256 -port 8080
               EOF
               chmod 755 $SERVER_SH

               cat <<-EOF > $CLIENT_SH
               #!/bin/sh

               source env.sh

               openssl s_client -key CLIENT.key -cert CLIENT.cer -CAfile CHAIN.cer -connect localhost:8080
               EOF
               chmod 755 $CLIENT_SH

               cat <<-EOF > $EXAMPLE_SH
               #!/bin/sh

               source env.sh

               ./tsd.openssl.vkms.engine.app.example
               EOF
               chmod 755 $EXAMPLE_SH

            packageScript: |
               buildenvPackageTarget install

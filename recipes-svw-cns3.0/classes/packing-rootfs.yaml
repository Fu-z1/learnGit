inherit: [packing-utils]

#buildVars: [MANIFEST_VERSION, CHECKSUM, SIGNATURE]
buildTools: [pkg, mib3-packing,e2fsdroid,fakeroot,build_ota.sh,zip]
buildScript: |
   CFILE=filesyste_config.txt
   permission=
   percode=
   basedir=
   declare -A config=()
   Char2Num(){
      r=0
      w=0
      e=0
      if [ "$1"x = "-"x ]; then
            r=0
      else
            r=1
      fi
      if [ "$2"x = "-"x ]; then
            w=0
      else
            w=1
      fi
      if [[ "$3"x = "x"x ]] || [[ "$3"x = "s"x ]] || [[ "$3"x = "t"x ]]; then
            e=1
      else
            e=0
      fi
      percode=$[$r*4+$w*2+$e*1]

   }

   extChar2Num(){
      r=0
      w=0
      e=0
      if [[ "$1"x = "s"x ]] || [[ "$1"x = "S"x ]]; then
            r=1
      else
            r=0
      fi
      if [[ "$2"x = "s"x ]] || [[ "$2"x = "S"x ]]; then
            w=1
      else
            w=0
      fi
      if [[ "$3"x = "t"x ]] || [[ "$3"x = "T"x ]]; then
            e=1
      else
            e=0
      fi
     percode=$[$r*4+$w*2+$e*1]

   }

   calculatePermission(){
      str=$1
      Char2Num ${str:1:1} ${str:2:1} ${str:3:1}
      user=$percode
      Char2Num ${str:4:1} ${str:5:1} ${str:6:1}
      group=$percode
      Char2Num ${str:7:1} ${str:8:1} ${str:9:1}
      other=$percode
      extChar2Num ${str:3:1} ${str:6:1} ${str:9:1}
      ext=$percode
      
      permission=$ext$user$group$other
   }

   buildconfig(){
      for element in `ls -a "$1"`
      do
        if [ "$element" != "." ] && [ "$element" != ".." ]; then
          dir_or_file="$1"/"$element"
          echo "dir_or_file :" ${dir_or_file}
          uid=`fakeroot-sysv ls -ladn "${dir_or_file}" | awk '{print $3}'`
          gid=`fakeroot-sysv ls -ladn "${dir_or_file}" | awk '{print $4}'`
          perm=`ls -ladn "${dir_or_file}" | awk '{print $1}'`
          calculatePermission $perm
          config[${dir_or_file#*$basedir}]="${dir_or_file#*$basedir},$uid,$gid,$permission,selabel=u:object_r:system_file:s0,capabilities=0x0"
          if [ -d $dir_or_file ]
          then
            buildconfig $dir_or_file
           fi
        fi
      done
   }

   buildRootfsModule() { MOD_DIRS=""
      CON_FILE=""
      OPTIND=1
      while getopts ":d:c:" opt; do
         case $opt in
            d) MOD_DIRS="$OPTARG" ;;
            c) CON_FILE="$OPTARG" ;;
            \?)
               echo "invalid option $OPTARG" >&2
               exit 1 ;;
         esac
      done

     ROOTFS=rootfs
     basedir=$ROOTFS
     IMAGE=linux_image
     rm -rf $ROOTFS
     rm -rf $IMAGE
     mkdir -p $ROOTFS
     mkdir -p $IMAGE
     #OLD_IFS="$IFS"
     #IFS="--submodule" 
     dirs=($MOD_DIRS)
     #IFS="$OLD_IFS"
     index=0
     for dir in ${dirs[@]}
     do
        if [[ $dir == --submodule ]]; then
           unset dirs[$index]
        else
           dirs[$index]=${dirs[$index]#*=}
           if [[ -d ${dirs[$index]} ]] ; then
             dirs[$index]=`find ${dirs[$index]} -name *.tgz`
           else
             unset dirs[$index]
           fi
           #`tar -xvf ${dirs[$index]} -C $ROOTFS`
        fi
        index=$(($index+1))
     done

     export INSTALL_AS_USER=no
     for dir in ${dirs[@]}
     do
     #tar -xvf $dir -C $ROOTFS
       fakeroot-sysv   pkg -r $ROOTFS add "$dir"
     done

     mv $ROOTFS/var $ROOTFS/tsd/
     mkdir -p $ROOTFS/var
     #rm -rf "$ROOTFS/etc/gem/esd/NHTSA Limitations.esd"
     #rm -rf $ROOTFS/tsd/hmi/config/debugprobes_*
     rm -rf $ROOTFS/tsd/lib/.debug
     rm -rf $ROOTFS/usr/lib/speech/domain/.debug
     rm -rf $ROOTFS/usr/lib/speech/.debug
     rm -rf $ROOTFS/usr/lib/.debug
     rm -rf $ROOTFS/usr/bin/.debug
     rm -rf $ROOTFS/lib/.debug
     rm -rf $ROOTFS/sbin/.debug
     rm -rf $ROOTFS/usr/public/ext/baidu/carlife/*.h
     rm -rf $ROOTFS/usr/include/HWIM_Keyboard.h
     touch -t 1801010000 $ROOTFS/java/lib/meta-index 

     depmod -b $ROOTFS -C $ROOTFS/etc/depmod.d "4.14.75-ltsi-yocto-standard"

     rm -rf $CFILE
     SAVEIFS=$IFS
     IFS=$(echo -en "\n\b")
     buildconfig $ROOTFS

     while read line1
     do
       fname=`echo "$line1" | cut -d ',' -f 1`
        config[$fname]="$line1"
     done < $CON_FILE 

     for key in ${!config[@]}
     do
        echo ${config[$key]} >> $CFILE
     done

     IFS=$SAVEIFS
     fakeroot mkuserimg_mke2fs.sh -s $ROOTFS $IMAGE/linux.img ext4 / 3221225472 -C $CFILE  -B $IMAGE/linux.map -L "rootfs_ro" -U ad3234ea-5b97-508c-9841-95d2c5b60851 

   }


   buildOtapackage() {
      OPTIND=1
      images=""
      container=""
      output=""
      while getopts ":m:c:o:" opt; do
         case $opt in
            m) images="$OPTARG" ;;
            c) container="$OPTARG" ;;
            o) output="$OPTARG" ;;
            \?)
               echo "invalid option $OPTARG" >&2
               exit 1 ;;
         esac
      done
      for img in ${images[@]}
      do
         cp $img $container/IMAGES
      done
      cd $container
      zip -r ../tmp.zip *
      cd ../ 
      build_ota.sh --read_only_partitions="system,vendor,linux" --no_signing tmp.zip $output
      
   }

   buildImgContainer() {
      OPTIND=1
      images=""
      container=""
      output=""
      while getopts ":m:c:o:" opt; do
         case $opt in
            m) images="$OPTARG" ;;
            c) container="$OPTARG" ;;
            o) output="$OPTARG" ;;
            \?)
               echo "invalid option $OPTARG" >&2
               exit 1 ;;
         esac
      done
      for img in ${images[@]}
      do
         cp $img $container/IMAGES
      done
      cd $container
      zip -r ../$output *
      cd ../ 
   }

   buildOtaFullpackage() {
      OPTIND=1
      base=""
      output=""
      while getopts ":b:o:" opt; do
         case $opt in
            b) base="$OPTARG" ;;
            o) output="$OPTARG" ;;
            \?)
               echo "invalid option $OPTARG" >&2
               exit 1 ;;
         esac
      done
      build_ota.sh --read_only_partitions="system,vendor,linux" --no_signing  $base  $output
   }

   buildOtaIncrementpackage() {
      OPTIND=1
      base=""
      new=""
      output=""
      while getopts ":b:n:o:" opt; do
         case $opt in
            b) base="$OPTARG" ;;
            n) new="$OPTARG" ;;
            o) output="$OPTARG" ;;
            \?)
               echo "invalid option $OPTARG" >&2
               exit 1 ;;
         esac
      done
      build_ota.sh --read_only_partitions="system,vendor,linux" --no_signing -i $base $new $output
   }

   # build a image for swupdater. Images are not packed with pkg tool
   # and have no default userdata
   buildOTASwupImage() {
      # we are now building swup modules in (almost) all target packages
      # some are used in root recipes (doxygen, unittest, host-linux etc.)
      # where no MODULE/PACKGE_VERSION is set
      # do not try to build them there
      if [[ -z "${MODULE_VERSION+xyz}" ]] && [[ -z "${PACKAGE_VERSION+xyz}" ]] ; then
         echo "buildSwupImage: aborting, no MODULE_VERSION or PACKAGE_VERSION defined"
         return
      fi
      if [[ ! -z ${CONFIG_SKIP_SWUPDATE_PKG_BUILD+xyz} ]] && [[ ${CONFIG_SKIP_SWUPDATE_PKG_BUILD} == "1" ]] ; then
         echo "buildSwupImage: skipping"
         return
      fi

      mib3-packing module \
         --fileType "image" \
         --packageType="module" \
         --packageVersion ${PACKAGE_VERSION} \
         --manifestVersion ${MANIFEST_VERSION} \
         --moduleVersion ${MODULE_VERSION} \
         -o _swupdata $@

      if [[ ${CHECKSUM} == "true" ]] ; then
         mib3-packing checksum \
            --manifestVersion ${MANIFEST_VERSION} \
            -o _swupdata \
            --type "image"
      fi
   }
